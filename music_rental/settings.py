"""
Django settings for music_rental project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-25_3kvhx8$%7g*p9nbo8(iy*vmiow3f%%x_%!3d@^7gb1t_8jy"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['0.0.0.0', 'localhost', '127.0.0.1', '192.168.1.96']


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    
    # Third-party apps
    "crispy_forms",
    "crispy_bootstrap5",
    "phonenumber_field",
    "rest_framework",
    "allauth",
    "allauth.account",
    "widget_tweaks",
    "simple_history",
    "storages",
    
    # Local apps
    "inventory.apps.InventoryConfig",
    "rentals.apps.RentalsConfig",
    "payments.apps.PaymentsConfig",
    "users.apps.UsersConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "simple_history.middleware.HistoryRequestMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "music_rental.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'templates')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "music_rental.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Crispy Forms
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Authentication settings
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Payment settings 
STRIPE_PUBLIC_KEY = ""
STRIPE_SECRET_KEY = ""
PAYPAL_CLIENT_ID = ""
PAYPAL_SECRET_KEY = ""

# Django AllAuth Settings
LOGIN_REDIRECT_URL = 'users:dashboard'
ACCOUNT_LOGOUT_REDIRECT_URL = 'home'
ACCOUNT_SIGNUP_REDIRECT_URL = 'users:dashboard'
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'optional'  # Set to 'mandatory' in production
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_SIGNUP_FORM_CLASS = 'users.forms.CustomerRegistrationForm'

# Custom admin styles
STATICFILES_DIRS.append(
    os.path.join(BASE_DIR, 'static/css/')
)

ADMIN_MEDIA_PREFIX = '/static/'

# --- Storage Configuration ---

# Google Cloud Storage settings (Default)
# GOOGLE_CLOUD_PROJECT_ID = os.environ.get('GOOGLE_CLOUD_PROJECT_ID') # Required for GCS
GOOGLE_CLOUD_PROJECT_ID = 'happypathway-1522441039906' # Set directly from user input
GS_BUCKET_NAME = 'roknsound-music-rental-inventory'
GS_OBJECT_PARAMETERS = {
    'cache_control': 'max-age=86400',
}
GS_LOCATION = 'media' # Optional: subdirectory within the bucket

# Set default file storage to GCS
DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'

# Media files URL (points to GCS)
MEDIA_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/{GS_LOCATION}/'

# Static files settings
STATICFILES_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage' # Use GCS for static files too
GS_STATIC_LOCATION = 'static' # Subdirectory for static files in GCS
STATIC_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/{GS_STATIC_LOCATION}/' # URL for static files in GCS

# STATIC_ROOT is where collectstatic gathers files locally *before* uploading
# It's still useful even when using remote storage
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles_collected_temp') 

# Local static dirs (for development and finding files during collectstatic)
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

# Remove or comment out the old conditional logic and AWS S3 specific logic
# USE_GCS = os.environ.get('USE_GCS', 'FALSE').upper() == 'TRUE'
# if USE_GCS and GOOGLE_CLOUD_PROJECT_ID:
#    ...
# else:
#    ...

# Configure the site framework (if using django.contrib.sites)
SITE_ID = 1

# OpenAI API settings
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY', '')
